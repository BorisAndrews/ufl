Roadmap for the development of UFL
----------------------------------

Suggestions:

# Prettyness:
 - Add pretty-print for all classes returning simpler strings than __repr__
 - Rename geometry.py to builtins.py or something better.

# Derivatives:
 - Test partial derivative operator found in base.py ( u.dx(i) )
 (- Probably don't: express all other operators in terms of partial derivative operator.

# Algorithms:
 - Clean up existing algorithms, they're probably broken now. Define more, define tests.
 - Implement conversion function that converts diffoperators Grad,Div,Curl to index notation
 - Implement conversion function that converts tensoroperators Inner, Dot, etc to index notation
 - Implement contraction function that expands all implicit summations into Sums

# License:
 - Which license do we pick? GPL3 or LGPL3?


- Elaborate more on the feature list on the wiki, trying to exhaust all ideas we have

- Define syntactic tests

- Discuss implementation approach (base on sympy? depends on the complexity we want)

- Finish implementation of UFL prototype such that all the syntactic tests pass

- Define tests that require a form compiler and verifies the computed element tensors
  (can use ufc_benchmark module and compare with results from existing working form compiler implementations)

- Implement utility algorithms that aid in the implementation of form compilers

- Implement UFL support in form compilers

- Make all tests pass for all form compiler configurations!

