Roadmap for the development of UFL
----------------------------------

Some of the TODO's left:

# Index handling:
 - Do we need UFLObject.repeated_indices()?
 - Do we need UFLObject.free_index_dimensions()?
 - Generalize index handling more? Share more functionality for this between Diff, PartialDiff, Product?

# Derivatives:
 - Finish Diff design, including index handling like in PartialDiff and Product. 
 - Apply AD to computation of Derivative, PartialDiff (really SpatialDiff) and Diff.
 - Find a smart way to handle nested AD:
    - Collapse nested PartialDiff (SpatialDiff) into a single SpatialDiff with multiple indices, sorted since they commute.
 - Apply Variable during AD to cache subexpressions we can reuse.

# Algorithms:
 - Implement contraction function that expands all implicit summations into Sums (do we need this? can be merged with evaluation anyway)
 - Implement evaluation function for swiginac and sympy, given expressions for each basisfunction and function.
 - Several small details and much testing remains in existing algorithms

# Elements and Basisfunctions (only minor or rare issues left):
 - Implement 'Test/Trial/BasisFunctions' for general tensor subelement with arbitrary symmetries
 - Add Cell support for high order geometries?
 - Add FunctionSpace concept?
     element = FiniteElement("CG", polygon, 1)
     V = FunctionSpace(element)
 - Keep or drop name in Function? Can eventually pass it to UFC if we add a "form::coefficient_name(i)" function.
 - Degree range for quadrature elements?
 - Agree on final design!

# Containers:
 - Test and finalize class Tensor.
 - Generalize ListVector/ListMatrix to ListTensor.

# Form-level operators:
 - Framework for applying these to parts of a form?
 - Implementations of lhs, rhs, action, derivative...

# Tests:
 - Write tests for the algorithms, ideally covering all code in multiple ways.

# Documentation:
 - Write the manual (can perhaps reuse some text I have)
 - Write the paper/book chapter (can perhaps reuse some text I have)
 - Improve operator docstrings (use epydoc @param and @return?)
 - Rewrite/improve all error messages

# Prettyness and readability (can wait):
 - Improve parentesis use in __str__ and __repr__ and ufl2latex, use precedence list

# Time derivatives (can wait):
 - Do we want something like Dt(u), Dtt(u), CR(a), FE(a), BE(a), TR(a, theta)? 

# Physical units (can wait):
 - Utility algorithms for validating the physical dimensions in a form.
   Input:
    - A form or expression
    - A mapping between Terminals (Function or BasisFunction instances)
      and physical units (using ScientificPython or something)
   Output:
    - Validation results (list of possible problems):
        - Some operators require equal units in their operands, e.g. Sum.
        - Some operators multiply the units, e.g. Product, Dot, Inner, etc.
        - Some operators divide the units, e.g. Division, Inverse.
        - Some operators require dimensionless operands, e.g. Exp, Ln.
      These considerations are not necessarily errors, maybe some
      things can be defined as warnings. Also, we would have to add
      physical units to all terminals to make this truly useful.

# License:
 - Which license do we pick? GPL3 or LGPL3?

* Notes by Anders (trying to make sense of the implementation)

  OK   = Understand it and it looks ok
  OK!  = Understand it and it looks really good (done)
  ??   = Don't understand this module (yet)
  --   = Undecided
  hmm  = Skeptical

  algebra.py              OK!
  base.py                 OK!
  baseoperators.py        --
  basisfunctions.py       --
  common.py               OK!
  classes.py              --
  conditionals.py         --
  differentiation.py      --
  elements.py             OK!
  finiteelement.py        OK!
  formoperators.py        --
  form.py                 --
  geometry.py             --
  indexing.py             --
  __init__.py             --
  integral.py             --
  mathfunctions.py        OK!
  objects.py              --
  operators.py            --
  output.py               OK!
  permutation.py          OK!
  restriction.py          --
  tensoralgebra.py        --
  tensors.py              --
  variable.py             --

  algorithms/__init__.py         --
  algorithms/analysis.py         --
  algorithms/ad.py               --
  algorithms/checks.py           --
  algorithms/predicates.py       --
  algorithms/transformations.py  --
  algorithms/traversal.py        --
  algorithms/utilities.py        Rename to algorithm(s).py
