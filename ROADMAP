Roadmap for the development of UFL
----------------------------------

Suggestions:

arguments basisfunctions
function mathfunctions
polygons shapes
differential diffoperators
forms formoperators
tensoralgebra tensoroperators

 - Put class Integral in integral.py
 - Rename geometry.py to something else (like builtins.py or functions.py)

 - Add module checks.py that performs checks on a finished form, things that
   can't be checked while the form is being built from the operators
 
 - Remove free_indices from all classes except Indexed
 - Let Indexed have two members: free_indices and fixed_indices

 - Add pretty-print for all classes returning simpler strings than __repr__

 - Add information about space dimensions for elements?
 - Add information about ranks of elements, not all elements are scalar

 - Add modules predicates.py with True/False properties for forms,
   including is_multilinear()

 - Add partial derivative operator and express all other operators in terms
   of this basic operator
 - Put partial derivative operator in base.py

 - Don't understand transformers.py


- Elaborate more on the feature list on the wiki, trying to exhaust all ideas we have

- Define syntactic tests

- Discuss implementation approach (base on sympy? depends on the complexity we want)

- Finish implementation of UFL prototype such that all the syntactic tests pass

- Define tests that require a form compiler and verifies the computed element tensors
  (can use ufc_benchmark module and compare with results from existing working form compiler implementations)

- Implement utility algorithms that aid in the implementation of form compilers

- Implement UFL support in form compilers

- Make all tests pass for all form compiler configurations!

