Roadmap for the development of UFL
----------------------------------

Some of the TODO's left:

# Elements:
 - Agree on final design!

# Basisfunctions:
 - Do we need 'BasisFunctions' etc? If so, fix count issue.

# Derivatives:
 - Finish Diff, including index handling like in P.D. and Product

# Algorithms:
 - Implement index expansion, converting u[i]*v[i] into u[0]*v[0]+u[0]*v[0] etc
 - Implement contraction function that expands all implicit summations into Sums

# Prettyness:
 - Improve parentesis use in __str__ and __repr__ and ufl2latex, use precedence list

# Tests:
 - Need more elaborate tests, some operators aren't tested, and few algorithms.

# Form compilation:
 - Implement utility algorithms that aid in the implementation of form compilers
 
 - Define tests that require a form compiler and verifies the computed element tensors
   (can use ufc_benchmark module and compare with results from existing working form compiler implementations)
 
 - Implement UFL support in form compilers!

 - Make all tests pass for all form compiler configurations!

# Documentation:
 - Ask for more ideas, 
 
 - Write the manual (can perhaps reuse some text I have)
 
 - Write the paper (can perhaps reuse some text I have)

# License:
 - Which license do we pick? GPL3 or LGPL3?

# Should we use "enums" or strings? For example "triangle", "tetrahedron"
  or TRIANGLE, TETRAHEDRON

# Note from Martin: Some stuff has moved around a bit now.
* Notes by Anders (trying to make sense of the implementation)

  OK   = Understand it and it looks ok
  OK!  = Understand it and it looks really good (done)
  ??   = Don't understand this module (yet)
  --   = Undecided
  hmm  = Skeptical

  algebra.py              OK!
  all.py                  --
  analysis.py             --
  base.py                 OK!
  basisfunctions.py       --
  checks.py               --
  common.py               OK!
  differentiation.py      --
  elements.py             OK!
  finiteelement.py        OK!
  formoperators.py        --
  form.py                 --
  geometry.py             --
  indexing.py             --
  __init__.py             --
  integral.py             --
  mathfunctions.py        --
  objects.py              --
  operators.py            --
  output.py               --
  permutation.py          OK!
  predicates.py           --
  restriction.py          --
  tensoralgebra.py        --
  tensors.py              --
  transformations.py      --
  traversal.py            --
  utilities.py            --
  variable.py             --
