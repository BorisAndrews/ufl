Roadmap for the development of UFL
----------------------------------

Suggestions:

# Prettyness:
 - Rename geometry.py to something else (like builtins.py or functions.py)
 - Add pretty-print for all classes returning simpler strings than __repr__

# Elements:
 - Add information about space dimensions for elements?
 - Add information about ranks of elements, not all elements are scalar WE HAVE THIS! value_rank, an element is not an expression
 - FiniteElement("vectorfamily",...) vs VectorElement(...) feels a bit inconsistent.

# Indexing:
 - Add free_indices() function and rank() function instead of visible member variables. Allows easier removal of member variable later if we want to optimize for memory usage.
   (Remove free_indices from all classes except Indexed)
 - Let Indexed have two members: free_indices and fixed_indices

# Derivatives:
 - Put partial derivative operator in base.py
   (Like (u + v).dx(i) ?)
 (- Add partial derivative operator and express all other operators in terms
    of this basic operator. NOT SO SURE ABOUT THIS!)

# Algorithms:
 - Don't understand transformers.py

# Misc:
 - Rename ufl_io.py --> io.py (or similar), already in ufl namespace
 - When do we raise excepion and when do we use assert?

# License:
 - Which license do we pick? GPL3 or LGPL3?

- Elaborate more on the feature list on the wiki, trying to exhaust all ideas we have

- Define syntactic tests

- Discuss implementation approach (base on sympy? depends on the complexity we want)

- Finish implementation of UFL prototype such that all the syntactic tests pass

- Define tests that require a form compiler and verifies the computed element tensors
  (can use ufc_benchmark module and compare with results from existing working form compiler implementations)

- Implement utility algorithms that aid in the implementation of form compilers

- Implement UFL support in form compilers

- Make all tests pass for all form compiler configurations!

