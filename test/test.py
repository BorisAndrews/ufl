#!/usr/bin/env python
"""Run all tests"""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-03-12 -- 2011-04-08"

# Modified by Martin Alnes 2011

import unittest
import sys
from os import system
from glob import glob
import logging
import ufl

def discover_tests(args):
    # Running tests from all test_foo.py files
    tests = sorted(f.replace(".py", "") for f in glob("test_*.py"))

    # Demos are slow, allow running everything else easily...
    tests.remove("test_analyse_demos")
    # ... and always check demos last
    if not "skipdemos" in args:
        tests.append("test_analyse_demos")

    return tests

_test_runner_script_template = """\
#!/usr/bin/env python
#
# This code is auto-generated by test.py, don't modify manually!
#

import logging
import ufl

# Emit all messages, show nothing on screen,
# but write everything to log file
logger = ufl.get_logger()
sh = ufl.get_handler()
fh = ufl.add_logfile()

logger.setLevel(logging.DEBUG)
sh.setLevel(logging.CRITICAL)
fh.setLevel(logging.DEBUG)

# Autogenerated imports
%s

if __name__ == "__main__":
    import unittest
    unittest.main()
"""

def run_test_runner_script(tests):
    # Write a script that has all TestCase classes in the global namespace
    # and invoke unittest.main(), probably an easier way to do this though.
    imports = "\n".join("from %s import *" % name for name in tests)
    testrunnercode = _test_runner_script_template % imports

    f = open("testrunner.py", "w")
    f.write(testrunnercode)
    f.close()

    return system("python testrunner.py")

def run_test_files_separately(tests):
    # Run test files one by one
    failed_tests = []
    for test in tests:
       print "Running tests: %s" % test
       failure = system("python %s.py" % test)
       if failure:
           failed_tests.append(test)
       print ""
    print "Failed test files:"
    print "\n".join(failed_tests)
    return len(failed_tests)

def configureLogging():
    # Emit all messages, show nothing on screen,
    # but write everything to log file
    from ufl.log import ufl_logger
    sh = ufl_logger.get_handler()
    fh = ufl_logger.add_logfile(level = logging.DEBUG)

    ufl_logger.set_level(logging.DEBUG)
    sh.setLevel(logging.CRITICAL)
    #fh.setLevel(logging.DEBUG)

def run_suite(tests):
    assert tests
    loader = unittest.TestLoader()
    modules = [__import__(test) for test in tests]
    suite = loader.loadTestsFromModule(modules[0])
    for m in modules[1:]:
        suite.addTests(loader.loadTestsFromModule(m))
    runner = unittest.TextTestRunner(verbosity=2)
    return runner.run(suite)

def main(args):
    tests = discover_tests(args)
    configureLogging()
    return run_suite(tests)

def main2(args):
    tests = discover_tests(args)
    logging.basicConfig(level=logging.CRITICAL)
    return run_test_runner_script(tests)

def main3(args):
    tests = discover_tests(args)
    logging.basicConfig(level=logging.CRITICAL)
    return run_test_files_separately(tests)

def mainx(args):
    for a in ('1', '2', '3'):
        if a in args:
            return eval('main%d'%int(a))(args)

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
