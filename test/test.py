#!/usr/bin/env python
"""Run all tests"""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-03-12 -- 2011-04-08"

# Modified by Martin Alnes 2011

import unittest
import sys
from os import system
from glob import glob
import logging

def discover_tests(args):
    # Running tests from all test_foo.py files
    tests = sorted(f.replace(".py", "") for f in glob("test_*.py"))
    # Demos are slow, allow running everything else easily
    if "skipdemos" in args:
        tests.remove("test_analyse_demos")
    return tests

_test_runner_script_template = """
#
# This code is auto-generated by test.py, don't modify manually!
#

import logging
import ufl

# Emit all messages, show nothing on screen,
# but write everything to log file
logger = ufl.get_logger()
sh = ufl.get_handler()
fh = ufl.add_logfile()

logger.setLevel(logging.DEBUG)
sh.setLevel(logging.CRITICAL)
fh.setLevel(logging.DEBUG)

# Autogenerated imports
%s

if __name__ == "__main__":
    import unittest
    unittest.main()
"""

def run_test_runner_script(tests):
    # Write a script that has all TestCase classes in the global namespace
    # and invoke unittest.main(), probably an easier way to do this though.
    imports = "\n".join("from %s import *" % name for name in tests)
    testrunnercode = _test_runner_script_template % imports

    f = open("testrunner.py", "w")
    f.write(testrunnercode)
    f.close()

    return system("python testrunner.py")

def run_test_files_separately(tests):
    # Run test files one by one
    failed_tests = []
    for test in tests:
       print "Running tests: %s" % test
       failure = system("python %s.py" % test)
       if failure:
           failed_tests.append(test)
       print ""
    print "Failed test files:"
    print "\n".join(failed_tests)
    return len(failed_tests)

def run_tests(tests):
    # Run tests TODO: Make this work, to speed up test suite and get more compact output. Currently fails when instantiating testcases.
    all_tests = []
    for test in tests:
        print "Adding tests from: %s" % test
        module = __import__(test)
        tests = [c() for c in vars(module).values() if isinstance(c, type) and issubclass(c, unittest.TestCase)]
        all_tests.extend(tests)
        suite = unittest.TestSuite(all_tests)
        runner = unittest.TextTestRunner(suite)
        runner.run()
    return failure

def main(args):
    tests = discover_tests(args)
    using_testrunner = True
    if using_testrunner:
        return run_test_runner_script(tests)
    else:
        return run_test_files_separately(tests)

if __name__ == "__main__":
    # Set log output level
    logging.basicConfig(level=logging.WARNING)
    sys.exit(main(sys.argv[1:]))
