# Copyright (C) 2007 Marie Rognes (meg@math.uio.no)
# Licensed under the GNU GPL version 3 or any later version
#
# The bilinear form a(v, u) and linear form L(v) for the Hodge Laplace
# problem using 0- and 1-forms. Intended to demonstrate use of Nedelec
# elements. 

def HodgeLaplaceGradCurl(element, felement):
    tau, v = TestFunctions(element)
    sigma, u = TrialFunctions(element)
    f = Coefficient(felement)

    a = ( inner(tau, sigma) - inner(grad(tau), u) +\
          inner(v, grad(sigma)) + inner(curl(v), curl(u)) )*dx
    L = inner(v, f)*dx
    
    return a, L

cell = tetrahedron
order = 1

GRAD = FiniteElement("Lagrange", cell, order)
CURL = FiniteElement("N1curl", cell, order-1)

VectorLagrange = VectorElement("Lagrange", cell, order+1)

a, L = HodgeLaplaceGradCurl(GRAD + CURL, VectorLagrange)

